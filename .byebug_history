c
row
c
transactions
error
c
amount_index
date_index
payee_index
c
column_index
row
q
c
column_index
row
c
puts transactions
c
puts transactions
transactions
q
c
header
c
q
transaction_wrapper
q
c
(100*Float("8.31")).floor
(100*Float(row[amount_index])).floor
row
c
ynab_api.transactions.create_transaction(budget_id, transaction_wrapper)
c
(83.1*100).to_i
831.02.floor
831.02
a*100.floor
a*100.round
a*100.to_nearest_i
a*100.to_i
a*100
a = 8.31
8.31
transaction_wrapper
ynab_api.transactions.get_transactions(budget_id)
transaction_wrapper
ynab_api.transactions.create_transaction(budget_id, transaction_wrapper)
c
transaction_wrapper
budget_id
ynab_api.transactions.create_transaction(budget_id, transaction_wrapper)
transaction_wrapper = YNAB::SaveTransactionsWrapper.new(transaction: transactions.last)
ynab_api.transactions
ynab_api.methods
ynab_api.create_transaction(budget_id, transaction_wrapper)
transaction_wrapper = YNAB::SaveTransactionsWrapper.new(transaction: transactions.last)
c
transaction_wrapper = YNAB::SaveTransactionsWrapper.new(transaction: transactions.last)
transaction_wrapper = YNAB::SaveTransactionsWrapper.new(transaction: transactions.last
transaction_wrapper = YNAB::SaveTransactionsWrapper.new(transaction: transactions.first)
transaction_wrapper = YNAB::SaveTransactionsWrapper.new(transaction: transactions.last)
transaction_wrapper = YNAB::SaveTransactionsWrapper.new(transaction: transaction.last)
c
transactions
c
transactions.first.cleared = "cleared"
transactions.first.cleared = "uncleared"
transactions.first.cleared = "cat"
transactions.first.cleared
transactions.first
c
transactions
c
transactions
q
c
Date.strptime(row[date_index], @date_format)
@date_format
c
@date_format
row[2]
date_index
row
c
maps["banks"]
maps
c
maps[bank]
maps
c
maps[bank]
maps
c
maps
bank
c
bank
bank.slice!('.csv')
bank
bank.slice('.csv')
bank
c
Parse.perform
c
item
c
item
c
q
c
Dir.foreach('./'){ |item| puts item }
Dir.foreach(''){ |item| puts item }
item
c
item
c
item
c
item
c
item
c
Map.new(:bmo)
c
Map.new(:bmo)
c
BankMap.new(:bmo)
c
Map.parse
Map.new
Map.new('bmo')
c
new_row
c
row.first
row
c
csv_out.close
c
new_row
c
new_row
quit
c
row
c
row.first.include?('Following data is valid as of')
row
row.include?('Following data is valid as of')
quit
row
c
row
quit
c
row.empty?
row
c
row
